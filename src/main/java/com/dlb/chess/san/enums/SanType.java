package com.dlb.chess.san.enums;

import com.dlb.chess.board.enums.PieceType;

public enum SanType {
  PAWN_NON_CAPTURING_NON_PROMOTION_MOVE(PieceType.PAWN, SanFormat.PAWN_NON_CAPTURING_NON_PROMOTION_FORMAT, false),
  PAWN_CAPTURING_NON_PROMOTION_MOVE(PieceType.PAWN, SanFormat.PAWN_CAPTURING_NON_PROMOTION_FORMAT, true),
  PAWN_NON_CAPTURING_PROMOTION_MOVE(PieceType.PAWN, SanFormat.PAWN_NON_CAPTURING_PROMOTION_FORMAT, false),
  PAWN_CAPTURING_PROMOTION_MOVE(PieceType.PAWN, SanFormat.PAWN_CAPTURING_PROMOTION_FORMAT, true),
  QUEEN_NON_CAPTURING_NEITHER_MOVE(PieceType.QUEEN, SanFormat.PIECE_NON_CAPTURING_NEITHER_FORMAT, false),
  QUEEN_NON_CAPTURING_FILE_MOVE(PieceType.QUEEN, SanFormat.PIECE_NON_CAPTURING_FILE_FORMAT, false),
  QUEEN_NON_CAPTURING_RANK_MOVE(PieceType.QUEEN, SanFormat.PIECE_NON_CAPTURING_RANK_FORMAT, false),
  QUEEN_NON_CAPTURING_SQUARE_MOVE(PieceType.QUEEN, SanFormat.PIECE_NON_CAPTURING_SQUARE_FORMAT, false),
  QUEEN_CAPTURING_NEITHER_MOVE(PieceType.QUEEN, SanFormat.PIECE_CAPTURING_NEITHER_FORMAT, true),
  QUEEN_CAPTURING_FILE_MOVE(PieceType.QUEEN, SanFormat.PIECE_CAPTURING_FILE_FORMAT, true),
  QUEEN_CAPTURING_RANK_MOVE(PieceType.QUEEN, SanFormat.PIECE_CAPTURING_RANK_FORMAT, true),
  QUEEN_CAPTURING_SQUARE_MOVE(PieceType.QUEEN, SanFormat.PIECE_CAPTURING_SQUARE_FORMAT, true),
  ROOK_NON_CAPTURING_NEITHER_MOVE(PieceType.ROOK, SanFormat.PIECE_NON_CAPTURING_NEITHER_FORMAT, false),
  ROOK_NON_CAPTURING_FILE_MOVE(PieceType.ROOK, SanFormat.PIECE_NON_CAPTURING_FILE_FORMAT, false),
  ROOK_NON_CAPTURING_RANK_MOVE(PieceType.ROOK, SanFormat.PIECE_NON_CAPTURING_RANK_FORMAT, false),
  // to specify the from square for the rook is always overspecification, we allow but validate later
  ROOK_NON_CAPTURING_SQUARE_MOVE(PieceType.ROOK, SanFormat.PIECE_NON_CAPTURING_SQUARE_FORMAT, false),
  ROOK_CAPTURING_NEITHER_MOVE(PieceType.ROOK, SanFormat.PIECE_CAPTURING_NEITHER_FORMAT, true),
  ROOK_CAPTURING_FILE_MOVE(PieceType.ROOK, SanFormat.PIECE_CAPTURING_FILE_FORMAT, true),
  ROOK_CAPTURING_RANK_MOVE(PieceType.ROOK, SanFormat.PIECE_CAPTURING_RANK_FORMAT, true),
  // to specify the from square for the rook is always overspecification, we allow but validate later
  ROOK_CAPTURING_SQUARE_MOVE(PieceType.ROOK, SanFormat.PIECE_CAPTURING_SQUARE_FORMAT, true),
  KNIGHT_NON_CAPTURING_NEITHER_MOVE(PieceType.KNIGHT, SanFormat.PIECE_NON_CAPTURING_NEITHER_FORMAT, false),
  KNIGHT_NON_CAPTURING_FILE_MOVE(PieceType.KNIGHT, SanFormat.PIECE_NON_CAPTURING_FILE_FORMAT, false),
  KNIGHT_NON_CAPTURING_RANK_MOVE(PieceType.KNIGHT, SanFormat.PIECE_NON_CAPTURING_RANK_FORMAT, false),
  KNIGHT_NON_CAPTURING_SQUARE_MOVE(PieceType.KNIGHT, SanFormat.PIECE_NON_CAPTURING_SQUARE_FORMAT, false),
  KNIGHT_CAPTURING_NEITHER_MOVE(PieceType.KNIGHT, SanFormat.PIECE_CAPTURING_NEITHER_FORMAT, true),
  KNIGHT_CAPTURING_FILE_MOVE(PieceType.KNIGHT, SanFormat.PIECE_CAPTURING_FILE_FORMAT, true),
  KNIGHT_CAPTURING_RANK_MOVE(PieceType.KNIGHT, SanFormat.PIECE_CAPTURING_RANK_FORMAT, true),
  KNIGHT_CAPTURING_SQUARE_MOVE(PieceType.KNIGHT, SanFormat.PIECE_CAPTURING_SQUARE_FORMAT, true),
  BISHOP_NON_CAPTURING_NEITHER_MOVE(PieceType.BISHOP, SanFormat.PIECE_NON_CAPTURING_NEITHER_FORMAT, false),
  BISHOP_NON_CAPTURING_FILE_MOVE(PieceType.BISHOP, SanFormat.PIECE_NON_CAPTURING_FILE_FORMAT, false),
  BISHOP_NON_CAPTURING_RANK_MOVE(PieceType.BISHOP, SanFormat.PIECE_NON_CAPTURING_RANK_FORMAT, false),
  BISHOP_NON_CAPTURING_SQUARE_MOVE(PieceType.BISHOP, SanFormat.PIECE_NON_CAPTURING_SQUARE_FORMAT, false),
  BISHOP_CAPTURING_NEITHER_MOVE(PieceType.BISHOP, SanFormat.PIECE_CAPTURING_NEITHER_FORMAT, true),
  BISHOP_CAPTURING_FILE_MOVE(PieceType.BISHOP, SanFormat.PIECE_CAPTURING_FILE_FORMAT, true),
  BISHOP_CAPTURING_RANK_MOVE(PieceType.BISHOP, SanFormat.PIECE_CAPTURING_RANK_FORMAT, true),
  BISHOP_CAPTURING_SQUARE_MOVE(PieceType.BISHOP, SanFormat.PIECE_CAPTURING_SQUARE_FORMAT, true),
  KING_NON_CASTLING_NON_CAPTURING_MOVE(PieceType.KING, SanFormat.KING_NON_CASTLING_NON_CAPTURING_FORMAT, false),
  KING_NON_CASTLING_CAPTURING_MOVE(PieceType.KING, SanFormat.KING_NON_CASTLING_CAPTURING_FORMAT, true),
  KING_CASTLING_QUEEN_SIDE_MOVE(PieceType.NONE, SanFormat.KING_CASTLING_QUEEN_SIDE_FORMAT, false),
  KING_CASTLING_KING_SIDE_MOVE(PieceType.NONE, SanFormat.KING_CASTLING_KING_SIDE_FORMAT, false);

  private final PieceType movingPieceType;
  private final SanFormat sanFormat;
  private final boolean isCapture;

  SanType(PieceType movingPieceType, SanFormat sanFormat, boolean isCapture) {
    this.movingPieceType = movingPieceType;
    this.sanFormat = sanFormat;
    this.isCapture = isCapture;
  }

  public PieceType getMovingPieceType() {
    return movingPieceType;
  }

  public SanFormat getSanFormat() {
    return sanFormat;
  }

  public boolean isCapture() {
    return isCapture;
  }

}
