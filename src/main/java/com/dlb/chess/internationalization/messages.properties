#piece type name
pieceType.rook.name=rook
pieceType.knight.name=knight
pieceType.bishop.name=bishop
pieceType.queen.name=queen
pieceType.king.name=king
pieceType.pawn.name=pawn

#color names
color.white.name=white
color.black.name=black

#SAN validation
validation.san.movingOntoItself=A piece cannot move onto itself.
validation.san.blank=The move specification cannot be blank.
validation.san.format=The move specification must use the SAN format.

validation.san.allExceptCastling.movingOntoOwnPiece=The move to square {0} is not possible because it is occupied by an own piece.
validation.san.allExceptCastling.noCaptureIsCapture=The move is indicated as non capturing but captures an opponent piece on {0}.
validation.san.allExceptCastling.captureIsNoCapture=A capturing move must capture an opponent piece, but there is no opponent piece on {0}.

validation.san.notPawn.specification.none.king.noLegalMove=The move specification is invalid because the king cannot move to square {0}.
validation.san.notPawn.specification.none.otherThanKing.noLegalMove=The move specification is invalid because there is no {0} which can move to square {1}.
validation.san.notPawn.specification.none.moreThanOneLegalMove=The move specification is invalid because there is more than one {0} which can move to square {1}. TODO provide options.

validation.san.notPawn.specification.file.invalidMovement=A {0} cannot move from file {1} to square {2}.
validation.san.notPawn.specification.file.noLegalMove=There is no {0} on file {1} which can move to square {2}.
validation.san.notPawn.specification.file.otherPiecesSameFile=The specification does not uniquely determine the move because there are other {0}'s on the same file which can move to {1}. TODO provide options.
validation.san.notPawn.specification.file.noOtherPiecesOtherFiles=Because there is only one {0} which can move to {1} the file must not be specified. TODO provide the correct SAN.

validation.san.notPawn.specification.rank.invalidMovement=A {0} cannot move from rank {1} to square {2}.
validation.san.notPawn.specification.rank.noLegalMove=There is no {0} on rank {1} which can move to square {2}.
validation.san.notPawn.specification.rank.otherPiecesSameRank=The specification does not uniquely determine the move because there are other {0}'s on the same rank which can move to {1}. TODO provide options.
validation.san.notPawn.specification.rank.noOtherPiecesOtherRanks=Because there is only one {0} which can move to {1} the rank must not be specified. TODO provide the correct SAN.
validation.san.notPawn.specification.rank.fileMustBeUsed=Because moving the {0} on square {1} to square {2} can only be specified using the file, the file must be specified. TODO provide the correct SAN.

validation.san.notPawn.specification.square.invalidMovement=A {0} cannot move from square {1} to square {2}.
validation.san.notPawn.specification.square.noLegalMove=There is no {0} on file {1}.
validation.san.notPawn.specification.square.noOtherPiecesOtherFiles.noOtherPiecesSameFile=Because there is only one {0} which can move to {1} the square must not be specified. TODO provide the correct SAN.
validation.san.notPawn.specification.square.noOtherPiecesOtherFiles.hasOtherPiecesSameFile=Because there are no {0}'s on other files which can move to {1} the file must not be specified. TODO provide the correct SAN.
validation.san.notPawn.specification.square.hasOtherPiecesOtherFiles.noOtherPiecesSameFile=Because there in other {0} on the same file which can move to {1} the rank must not be specified. TODO provide the correct SAN.


validation.san.noLegalMove.fromFile=The san is not valid, because there is no legal move for {0} from file {1} to square {2}.
validation.san.noLegalMove.fromRank=The san is not valid, because there is no legal move for {0} from rank {1} to square {2}.
validation.san.noLegalMove.fromSquare=The san is not valid, because there is no legal move for {0} from square {1} to square {2}.
                  
validation.san.overspecification.file=The san is not valid, because there is only one legal move for the {0} to square {1}. Please remove the specification of the from file to make the san valid.
validation.san.overspecification.rank=The san is not valid, because there is only one legal move for the {0} to square {1}. Please remove the specification of the from rank to make the san valid.
validation.san.overspecification.square=The san is not valid, because there is only one legal move for the {0} to square {1}. Please remove the specification of the square to make the san valid.

validation.san.notDetermined.byFile=The san is not valid, because there are multiple {0} on the specified file {1} which can move to the square {2}. To move a piece on this file to the specified square please specify the piece as required by the rank or square.
validation.san.notDetermined.byRank=The san is not valid, because there are multiple {0} on the specified rank {1} which can move to the square {2}. To move a piece on this file to the specified square please specify the piece as required by the rank or square.

validation.san.rankInsteadOfFileUsed=The specified rank is unique but because the file is also unigue, the file must be used to specify the move.                  
                  
validation.san.multipleLegalMoves=The san is not valid, because there are multiple moves for the {0} to square {1}. Please specify which piece you want to move using the rank/file specification.


validation.san.pawn.invalidRank=A {0} {1} can never move to rank {2}.
validation.san.pawn.invalidFromAndToFileNotAdjacent=A pawn can never move from file {0} to file {1}.
validation.san.pawn.invalidPromotionRank=A {0} {1} can only promote on rank {2}.
validation.san.pawn.invalidNoPromotionPiece=The pawn moved to the promotion rank but the promotion piece is not specified.

validation.san.pawn.noLegalMove=There is no pawn which can move to {1}.

validation.san.castling.queenSide=The queen side castling move is not a legal move.
validation.san.castling.kingSide=The king side castling move is not a legal move.

##analzyer

#repetitions
analysis.repetition.threefold.ahead.title=Valid threefold claims ahead
analysis.repetition.threefold.ahead.none=None
analysis.repetition.threefold.list.title=Threefolds and beyond
analysis.repetition.threefold.list.none=None
analysis.repetition.threefold.yesno.title=Threefold repetition
analysis.repetition.threefold.yesno.yes=Yes
analysis.repetition.threefold.yesno.no=No
analysis.repetition.fivefold.yesno.title=Fivefold repetition
analysis.repetition.fivefold.yesno.yes=Yes
analysis.repetition.fivefold.yesno.no=No
analysis.repetition.fold={0}-fold

#yawn moves
analysis.yawnmove.sequence.title=Sequences without capture and pawn move starting from {0} moves
analysis.yawnmove.sequence.none=None
analysis.yawnmove.fiftyMoves.title=Fifty moves without capture and pawn move
analysis.yawnmove.fiftyMoves.yes=Yes
analysis.yawnmove.fiftyMoves.no=No
analysis.yawnmove.seventyFiveMoves.title=Seventy-five moves without capture and pawn move
analysis.yawnmove.seventyFiveMoves.yes=Yes
analysis.yawnmove.seventyFiveMoves.no=No

#board
analysis.board.result=Result per last position
analysis.board.checkmatebyWhite=Checkmate by White
analysis.board.checkmatebyBlack=Checkmate by Black
analysis.board.stalemate=Stalemate
analysis.board.fivefoldRepetition=Fivefold repetition
analysis.board.seventyFiveMoves=Seventy-five moves
analysis.board.insufficientMaterial=Insufficient material
analysis.board.deadPosition=Dead position
analysis.board.ongoing=Ongoing
analysis.board.score.whiteWin=1-0
analysis.board.score.blackWin=0-0
analysis.board.score.draw=1/2-1/2

#testing (do not change and do not remove please)
#basic
test123=Test message 1
test123.test432=Test message 1
test123.432=Test message 1
test123.test432.test30=Test message 1
#whitespace
test.message.testWithLeftWhitespace=  The knight is good in the attack.
test.message.testWithRightWhitespace=The knight is good in the attack.  
test.message.testWithLeftRightWhitespace=  The knight is good in the attack.      
test.message.testWithInbetweenWhitespace=The knight is   good    in  the attack.
test.message.testWithAllKindOfWhitespace=   The   knight  is good in   the  attack.   
test.message.testWithoutPlaceholder=The piece cannot move in this way.
#placeholders
test.message.testWithOnePlaceholder=The {0} cannot move in this way.
test.message.testWithTwoPlaceholders=The {0} is stronger than the {1}.